<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ToyDrone Configuration\ToyDrone Configuration.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ToyDrone Configuration\ToyDrone Configuration.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 21 13:31:30 2018
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; enableAllSensors &rArr; myprintf &rArr; usart_puts &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ad]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">NMI_Handler</a><BR>
 <LI><a href="#[ae]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">HardFault_Handler</a><BR>
 <LI><a href="#[af]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">MemManage_Handler</a><BR>
 <LI><a href="#[b0]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0]">BusFault_Handler</a><BR>
 <LI><a href="#[b1]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">UsageFault_Handler</a><BR>
 <LI><a href="#[b2]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2]">SVC_Handler</a><BR>
 <LI><a href="#[b3]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b3]">DebugMon_Handler</a><BR>
 <LI><a href="#[b4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4]">PendSV_Handler</a><BR>
 <LI><a href="#[c8]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c8]">ADC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b0]">BusFault_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c1]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c2]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c3]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c4]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c5]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c6]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c7]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[dc]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e0]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e1]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e2]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e3]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e4]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e6]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e7]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e8]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b3]">DebugMon_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[bc]">EXTI0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d9]">EXTI15_10_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[bd]">EXTI1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[be]">EXTI2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[bf]">EXTI3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c0]">EXTI4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c9]">EXTI9_5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ba]">FLASH_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ec]">FPU_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ae]">HardFault_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d2]">I2C1_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d1]">I2C1_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d4]">I2C2_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d3]">I2C2_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[eb]">I2C3_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ea]">I2C3_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[62]">LIS2MDL_Check_WhoAmI</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Check_WhoAmI) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[5e]">LIS2MDL_DeInit</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_DeInit) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[63]">LIS2MDL_Get_Axes</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_Axes) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[64]">LIS2MDL_Get_AxesRaw</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_AxesRaw) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[6e]">LIS2MDL_Get_DRDY_Status</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_DRDY_Status) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[69]">LIS2MDL_Get_FS</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_FS) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[66]">LIS2MDL_Get_ODR</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_ODR) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[65]">LIS2MDL_Get_Sensitivity</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_Sensitivity) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[61]">LIS2MDL_Get_WhoAmI</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_WhoAmI) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[5d]">LIS2MDL_Init</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Init) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[6c]">LIS2MDL_Read_Reg</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Read_Reg) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[60]">LIS2MDL_Sensor_Disable</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Sensor_Disable) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[5f]">LIS2MDL_Sensor_Enable</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Sensor_Enable) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[6a]">LIS2MDL_Set_FS</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_FS) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[6b]">LIS2MDL_Set_FS_Value</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_FS_Value) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[67]">LIS2MDL_Set_ODR</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_ODR) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[68]">LIS2MDL_Set_ODR_Value</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_ODR_Value) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[6d]">LIS2MDL_Write_Reg</a> from lis2mdl_mag_driver_hl.o(i.LIS2MDL_Write_Reg) referenced 2 times from lis2mdl_mag_driver_hl.o(.data)
 <LI><a href="#[90]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[89]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[8c]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[8a]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[91]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[8f]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[8b]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[93]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[97]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[96]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[92]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[94]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[8d]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[8e]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[95]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[74]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[70]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[7b]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[76]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[75]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[73]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[6f]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[79]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[72]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[71]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[77]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[78]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[7a]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[81]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[7d]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[88]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[83]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[82]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[80]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[7c]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[86]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[7f]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[7e]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[84]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[85]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[87]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[9d]">LSM303AGR_X_Check_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[99]">LSM303AGR_X_DeInit</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[9e]">LSM303AGR_X_Get_Axes</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[9f]">LSM303AGR_X_Get_AxesRaw</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a7]">LSM303AGR_X_Get_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[ab]">LSM303AGR_X_Get_DRDY_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a4]">LSM303AGR_X_Get_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a1]">LSM303AGR_X_Get_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a0]">LSM303AGR_X_Get_Sensitivity</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[9c]">LSM303AGR_X_Get_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[98]">LSM303AGR_X_Init</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a9]">LSM303AGR_X_Read_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[9b]">LSM303AGR_X_Sensor_Disable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[9a]">LSM303AGR_X_Sensor_Enable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a8]">LSM303AGR_X_Set_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a5]">LSM303AGR_X_Set_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a6]">LSM303AGR_X_Set_FS_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a2]">LSM303AGR_X_Set_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[a3]">LSM303AGR_X_Set_ODR_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[aa]">LSM303AGR_X_Write_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[36]">LSM6DSL_FIFO_G_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[35]">LSM6DSL_FIFO_G_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2b]">LSM6DSL_FIFO_Get_Data</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[28]">LSM6DSL_FIFO_Get_Empty_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[27]">LSM6DSL_FIFO_Get_Full_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2c]">LSM6DSL_FIFO_Get_Num_Of_Samples</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[29]">LSM6DSL_FIFO_Get_Overrun_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2a]">LSM6DSL_FIFO_Get_Pattern</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[30]">LSM6DSL_FIFO_Set_INT1_FIFO_Full</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2f]">LSM6DSL_FIFO_Set_Mode</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[26]">LSM6DSL_FIFO_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[32]">LSM6DSL_FIFO_Set_Stop_On_Fth</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[31]">LSM6DSL_FIFO_Set_Watermark_Level</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2e]">LSM6DSL_FIFO_X_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2d]">LSM6DSL_FIFO_X_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[50]">LSM6DSL_G_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4c]">LSM6DSL_G_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[51]">LSM6DSL_G_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[52]">LSM6DSL_G_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5c]">LSM6DSL_G_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[57]">LSM6DSL_G_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[54]">LSM6DSL_G_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[53]">LSM6DSL_G_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4f]">LSM6DSL_G_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4b]">LSM6DSL_G_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5a]">LSM6DSL_G_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4e]">LSM6DSL_G_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4d]">LSM6DSL_G_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[58]">LSM6DSL_G_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[59]">LSM6DSL_G_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[37]">LSM6DSL_G_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[55]">LSM6DSL_G_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[56]">LSM6DSL_G_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[38]">LSM6DSL_G_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5b]">LSM6DSL_G_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3e]">LSM6DSL_X_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3a]">LSM6DSL_X_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1e]">LSM6DSL_X_Disable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17]">LSM6DSL_X_Disable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[2]">LSM6DSL_X_Disable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[6]">LSM6DSL_X_Disable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14]">LSM6DSL_X_Disable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a]">LSM6DSL_X_Disable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d]">LSM6DSL_X_Disable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[10]">LSM6DSL_X_Disable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1d]">LSM6DSL_X_Enable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16]">LSM6DSL_X_Enable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1]">LSM6DSL_X_Enable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[5]">LSM6DSL_X_Enable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13]">LSM6DSL_X_Enable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9]">LSM6DSL_X_Enable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c]">LSM6DSL_X_Enable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f]">LSM6DSL_X_Enable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1f]">LSM6DSL_X_Get_6D_Orientation_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[21]">LSM6DSL_X_Get_6D_Orientation_XH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[20]">LSM6DSL_X_Get_6D_Orientation_XL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[23]">LSM6DSL_X_Get_6D_Orientation_YH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[22]">LSM6DSL_X_Get_6D_Orientation_YL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[25]">LSM6DSL_X_Get_6D_Orientation_ZH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[24]">LSM6DSL_X_Get_6D_Orientation_ZL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3f]">LSM6DSL_X_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[40]">LSM6DSL_X_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4a]">LSM6DSL_X_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[18]">LSM6DSL_X_Get_Double_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[45]">LSM6DSL_X_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3]">LSM6DSL_X_Get_Free_Fall_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[42]">LSM6DSL_X_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7]">LSM6DSL_X_Get_Pedometer_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[41]">LSM6DSL_X_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15]">LSM6DSL_X_Get_Single_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8]">LSM6DSL_X_Get_Step_Count</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e]">LSM6DSL_X_Get_Tilt_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[11]">LSM6DSL_X_Get_Wake_Up_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3d]">LSM6DSL_X_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[39]">LSM6DSL_X_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[48]">LSM6DSL_X_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3c]">LSM6DSL_X_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[3b]">LSM6DSL_X_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[46]">LSM6DSL_X_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[47]">LSM6DSL_X_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[4]">LSM6DSL_X_Set_Free_Fall_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[33]">LSM6DSL_X_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[43]">LSM6DSL_X_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[44]">LSM6DSL_X_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b]">LSM6DSL_X_Set_Pedometer_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[34]">LSM6DSL_X_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1c]">LSM6DSL_X_Set_Tap_Duration_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1b]">LSM6DSL_X_Set_Tap_Quiet_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[1a]">LSM6DSL_X_Set_Tap_Shock_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[19]">LSM6DSL_X_Set_Tap_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12]">LSM6DSL_X_Set_Wake_Up_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[49]">LSM6DSL_X_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[af]">MemManage_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ad]">NMI_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e5]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[db]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b7]">PVD_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b4]">PendSV_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[bb]">RCC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[da]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b9]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ac]">Reset_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[dd]">SDIO_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d5]">SPI1_IRQHandler</a> from stm32f4xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d6]">SPI2_IRQHandler</a> from stm32f4xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[df]">SPI3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ed]">SPI4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[f1]">SPI_DMAAbortOnError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[b2]">SVC_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b5]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ef]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xc.o(.text)
 <LI><a href="#[b8]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ca]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[cd]">TIM1_CC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[cc]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[cb]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[ce]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[cf]">TIM3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d0]">TIM4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[de]">TIM5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[f2]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[d7]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d8]">USART2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e9]">USART6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b1]">UsageFault_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b6]">WWDG_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[f0]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xc.o(.text)
 <LI><a href="#[f3]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[ee]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[f0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(.text)
</UL>
<P><STRONG><a name="[2bb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2bc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2bd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2be]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2bf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2c0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ac]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2c1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS2MDL_MAGNETO_Init
</UL>

<P><STRONG><a name="[2c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_fusion_ag
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_fusion_ag
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToEuler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_fusion_ag
</UL>

<P><STRONG><a name="[2c5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
</UL>

<P><STRONG><a name="[29c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToEuler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_fusion_ag
</UL>

<P><STRONG><a name="[2c6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2c7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2c8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2cb]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[fe]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2cc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2cd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>BSP_ACCELERO_Get_Axes</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ACCELERO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorRawData
</UL>

<P><STRONG><a name="[10c]"></a>BSP_ACCELERO_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_ACCELERO_Init &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAllSensors
</UL>

<P><STRONG><a name="[2ad]"></a>BSP_ACCELERO_Read_Reg</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ACCELERO_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a3]"></a>BSP_ACCELERO_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_ACCELERO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[2ac]"></a>BSP_ACCELERO_Set_FS</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ACCELERO_Set_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ab]"></a>BSP_ACCELERO_Set_ODR_Value</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ACCELERO_Set_ODR_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ae]"></a>BSP_ACCELERO_Write_Reg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, steval_fcu001_v1_accelero.o(i.BSP_ACCELERO_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ACCELERO_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>BSP_GYRO_Get_Axes</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, steval_fcu001_v1_gyro.o(i.BSP_GYRO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_GYRO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorRawData
</UL>

<P><STRONG><a name="[10f]"></a>BSP_GYRO_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, steval_fcu001_v1_gyro.o(i.BSP_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_GYRO_Init &rArr; BSP_LSM6DSL_GYRO_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAllSensors
</UL>

<P><STRONG><a name="[2a5]"></a>BSP_GYRO_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, steval_fcu001_v1_gyro.o(i.BSP_GYRO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_GYRO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[2af]"></a>BSP_GYRO_Write_Reg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, steval_fcu001_v1_gyro.o(i.BSP_GYRO_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_GYRO_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>BSP_LED_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, steval_fcu001_v1.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>BSP_LED_Off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, steval_fcu001_v1.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>BSP_LED_On</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, steval_fcu001_v1.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>BSP_LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, steval_fcu001_v1.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>BSP_MAGNETO_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, steval_fcu001_v1_magneto.o(i.BSP_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_MAGNETO_Init &rArr; BSP_LIS2MDL_MAGNETO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS2MDL_MAGNETO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAllSensors
</UL>

<P><STRONG><a name="[2a6]"></a>BSP_MAGNETO_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, steval_fcu001_v1_magneto.o(i.BSP_MAGNETO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MAGNETO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[2b0]"></a>BSP_MAGNETO_Write_Reg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, steval_fcu001_v1_magneto.o(i.BSP_MAGNETO_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_MAGNETO_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>BSP_PRESSURE_Get_Press</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, steval_fcu001_v1_pressure.o(i.BSP_PRESSURE_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_PRESSURE_Get_Press
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorRawData
</UL>

<P><STRONG><a name="[124]"></a>BSP_PRESSURE_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, steval_fcu001_v1_pressure.o(i.BSP_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_PRESSURE_Init &rArr; BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAllSensors
</UL>

<P><STRONG><a name="[2a7]"></a>BSP_PRESSURE_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, steval_fcu001_v1_pressure.o(i.BSP_PRESSURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_PRESSURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[2b7]"></a>ClearTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.ClearTimer))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b5]"></a>FlightControlPID_OuterLoop</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, flight_control.o(i.FlightControlPID_OuterLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlightControlPID_OuterLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>FlightControlPID_innerLoop</STRONG> (Thumb, 1072 bytes, Stack size 16 bytes, flight_control.o(i.FlightControlPID_innerLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlightControlPID_innerLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[2b4]"></a>GetTargetEulerAngle</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, rc.o(i.GetTargetEulerAngle))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[255]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 386 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_GPIO_Init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init_All
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[117]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[114]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init_All
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Enable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Disable
</UL>

<P><STRONG><a name="[128]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[26d]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[129]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[16c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[131]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[13b]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[13d]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[140]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[143]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[144]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1636 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[164]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[163]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[165]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[162]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[166]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1090 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[169]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[267]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[26f]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16d]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rc.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Callback &rArr; User_Timer_Callback &rArr; TimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Timer_Callback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc_variables
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[170]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; User_Timer_Callback &rArr; TimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[258]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, rc.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; add_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rc_data
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ReadSensorRawData &rArr; BSP_PRESSURE_Get_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[192]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2286 bytes, Stack size 56 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; ReadSensorRawData &rArr; BSP_PRESSURE_Get_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControlPID_innerLoop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm_zero
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSensorRawData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_UART_MspInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[272]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_puts
</UL>

<P><STRONG><a name="[271]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[1a6]"></a>LIS2MDL_MAG_Get_MagneticOutputs</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_Get_MagneticOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LIS2MDL_MAG_Get_MagneticOutputs &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_Axes_Raw
</UL>

<P><STRONG><a name="[1a8]"></a>LIS2MDL_MAG_R_DataRate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_R_DataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_R_DataRate &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_ODR
</UL>

<P><STRONG><a name="[1a7]"></a>LIS2MDL_MAG_R_STATUS_bits</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_R_STATUS_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_R_STATUS_bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_DRDY_Status
</UL>

<P><STRONG><a name="[1a9]"></a>LIS2MDL_MAG_R_WhoAmI_Bits</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_R_WhoAmI_Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_R_WhoAmI_Bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_WhoAmI
</UL>

<P><STRONG><a name="[1ad]"></a>LIS2MDL_MAG_ReadReg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_SelfTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_Operating_Mode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_DataRate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_BlockDataUpdate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_R_WhoAmI_Bits
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_R_STATUS_bits
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_R_DataRate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Get_MagneticOutputs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Read_Reg
</UL>

<P><STRONG><a name="[1ab]"></a>LIS2MDL_MAG_W_BlockDataUpdate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_W_BlockDataUpdate &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_WriteReg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[1b0]"></a>LIS2MDL_MAG_W_DataRate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_W_DataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_W_DataRate &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_WriteReg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Set_ODR_Value
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Set_ODR
</UL>

<P><STRONG><a name="[1aa]"></a>LIS2MDL_MAG_W_Operating_Mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_W_Operating_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_W_Operating_Mode &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_WriteReg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Sensor_Enable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Sensor_Disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[1ac]"></a>LIS2MDL_MAG_W_SelfTest</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_W_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_MAG_W_SelfTest &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_WriteReg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>

<P><STRONG><a name="[1af]"></a>LIS2MDL_MAG_WriteReg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lis2mdl_mag_driver.o(i.LIS2MDL_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_SelfTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_Operating_Mode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_DataRate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_BlockDataUpdate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Write_Reg
</UL>

<P><STRONG><a name="[1bf]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[1c1]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[1b6]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[1b5]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[1b7]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[1c3]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[1c4]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>

<P><STRONG><a name="[1c5]"></a>LPS22HB_Get_RawPressure</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>

<P><STRONG><a name="[1c6]"></a>LPS22HB_Get_RawTemperature</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>

<P><STRONG><a name="[1c7]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>

<P><STRONG><a name="[1c0]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SwResetAndMemoryBoot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_I2C
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_SpiInterface
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>

<P><STRONG><a name="[1cf]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[1ce]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[1b8]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[1b9]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[1ba]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[1bb]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[1be]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[1bc]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[1bd]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[11f]"></a>LPS22HB_Set_I2C</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_I2C &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[1cc]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[1cd]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[1cb]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[1ca]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[1c9]"></a>LPS22HB_Set_SpiInterface</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_SpiInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Set_SpiInterface &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[11d]"></a>LPS22HB_SwResetAndMemoryBoot</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_SwResetAndMemoryBoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_SwResetAndMemoryBoot &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[1d6]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SwResetAndMemoryBoot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_I2C
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_SpiInterface
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>

<P><STRONG><a name="[1d7]"></a>LSM303AGR_ACC_Get_Acceleration</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes
</UL>

<P><STRONG><a name="[1db]"></a>LSM303AGR_ACC_Get_Raw_Acceleration</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Raw_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[1da]"></a>LSM303AGR_ACC_R_FullScale</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_Normal_Mode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_LP_Mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_HR_Mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_FS
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[1d8]"></a>LSM303AGR_ACC_R_HiRes</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[1d9]"></a>LSM303AGR_ACC_R_LOWPWR_EN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_LOWPWR_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[1dd]"></a>LSM303AGR_ACC_R_ODR</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
</UL>

<P><STRONG><a name="[1de]"></a>LSM303AGR_ACC_R_WHO_AM_I</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
</UL>

<P><STRONG><a name="[1df]"></a>LSM303AGR_ACC_R_XDataAvail</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XDataAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[1e0]"></a>LSM303AGR_ACC_R_XEN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[1e1]"></a>LSM303AGR_ACC_R_YEN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[1e2]"></a>LSM303AGR_ACC_R_ZEN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[1dc]"></a>LSM303AGR_ACC_ReadReg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Read_Reg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
</UL>

<P><STRONG><a name="[1e3]"></a>LSM303AGR_ACC_W_BlockDataUpdate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_BlockDataUpdate &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[1e5]"></a>LSM303AGR_ACC_W_FifoMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_FifoMode &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[1e6]"></a>LSM303AGR_ACC_W_FullScale</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS_Value
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
</UL>

<P><STRONG><a name="[1e7]"></a>LSM303AGR_ACC_W_ODR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_When_Enabled
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[1e8]"></a>LSM303AGR_ACC_W_XEN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_XEN &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[1e9]"></a>LSM303AGR_ACC_W_YEN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_YEN &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[1ea]"></a>LSM303AGR_ACC_W_ZEN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[1e4]"></a>LSM303AGR_ACC_WriteReg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Write_Reg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[1f3]"></a>LSM6DSL_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[1f5]"></a>LSM6DSL_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[1f6]"></a>LSM6DSL_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>

<P><STRONG><a name="[1f7]"></a>LSM6DSL_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Step_Count
</UL>

<P><STRONG><a name="[1f8]"></a>LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[1f9]"></a>LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[1fa]"></a>LSM6DSL_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[1fb]"></a>LSM6DSL_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[1fc]"></a>LSM6DSL_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[1fd]"></a>LSM6DSL_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[1fe]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[1ff]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[200]"></a>LSM6DSL_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[201]"></a>LSM6DSL_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[202]"></a>LSM6DSL_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[203]"></a>LSM6DSL_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[204]"></a>LSM6DSL_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[205]"></a>LSM6DSL_ACC_GYRO_R_FS_125</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[206]"></a>LSM6DSL_ACC_GYRO_R_FS_G</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[207]"></a>LSM6DSL_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_FS
</UL>

<P><STRONG><a name="[208]"></a>LSM6DSL_ACC_GYRO_R_GDA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[209]"></a>LSM6DSL_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
</UL>

<P><STRONG><a name="[20a]"></a>LSM6DSL_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
</UL>

<P><STRONG><a name="[20b]"></a>LSM6DSL_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[20c]"></a>LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[20d]"></a>LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[20e]"></a>LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[20f]"></a>LSM6DSL_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>

<P><STRONG><a name="[210]"></a>LSM6DSL_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[211]"></a>LSM6DSL_ACC_GYRO_R_XLDA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[1f4]"></a>LSM6DSL_ACC_GYRO_ReadReg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LowPassFiltSel_XL
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LP_BW_G
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_InComposit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_HPCF_XL
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_I2C_DISABLE
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
</UL>

<P><STRONG><a name="[212]"></a>LSM6DSL_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[214]"></a>LSM6DSL_ACC_GYRO_W_BASIC_INT</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BASIC_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BASIC_INT &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[215]"></a>LSM6DSL_ACC_GYRO_W_BDU</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BDU &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[216]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[217]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[218]"></a>LSM6DSL_ACC_GYRO_W_DUR</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
</UL>

<P><STRONG><a name="[219]"></a>LSM6DSL_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[21a]"></a>LSM6DSL_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[21b]"></a>LSM6DSL_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[21c]"></a>LSM6DSL_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Free_Fall_Threshold
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[21d]"></a>LSM6DSL_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[21e]"></a>LSM6DSL_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[21f]"></a>LSM6DSL_ACC_GYRO_W_FS_125</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_125 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
</UL>

<P><STRONG><a name="[220]"></a>LSM6DSL_ACC_GYRO_W_FS_G</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
</UL>

<P><STRONG><a name="[221]"></a>LSM6DSL_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS_Value
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[222]"></a>LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[223]"></a>LSM6DSL_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FUNC_EN &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[224]"></a>LSM6DSL_ACC_GYRO_W_HPCF_XL</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_HPCF_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_HPCF_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>LSM6DSL_ACC_GYRO_W_I2C_DISABLE</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_I2C_DISABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_I2C_DISABLE &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
</UL>

<P><STRONG><a name="[225]"></a>LSM6DSL_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[226]"></a>LSM6DSL_ACC_GYRO_W_InComposit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_InComposit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_InComposit &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>LSM6DSL_ACC_GYRO_W_LIR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[228]"></a>LSM6DSL_ACC_GYRO_W_LP_BW_G</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_LP_BW_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_LP_BW_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229]"></a>LSM6DSL_ACC_GYRO_W_LowPassFiltSel_XL</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_LowPassFiltSel_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_LowPassFiltSel_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>LSM6DSL_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[22b]"></a>LSM6DSL_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_When_Enabled
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[22c]"></a>LSM6DSL_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_When_Enabled
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
</UL>

<P><STRONG><a name="[22d]"></a>LSM6DSL_ACC_GYRO_W_PEDO</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PEDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PEDO &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[22e]"></a>LSM6DSL_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Step_Counter_Reset
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[22f]"></a>LSM6DSL_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
</UL>

<P><STRONG><a name="[230]"></a>LSM6DSL_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
</UL>

<P><STRONG><a name="[231]"></a>LSM6DSL_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
</UL>

<P><STRONG><a name="[232]"></a>LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[233]"></a>LSM6DSL_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[234]"></a>LSM6DSL_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[235]"></a>LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[236]"></a>LSM6DSL_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[237]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_SelfTest
</UL>

<P><STRONG><a name="[238]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_SelfTest
</UL>

<P><STRONG><a name="[239]"></a>LSM6DSL_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[23a]"></a>LSM6DSL_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
</UL>

<P><STRONG><a name="[23b]"></a>LSM6DSL_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[23c]"></a>LSM6DSL_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[23d]"></a>LSM6DSL_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[23e]"></a>LSM6DSL_ACC_GYRO_W_TILT</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TILT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TILT &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[23f]"></a>LSM6DSL_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TIMER_HR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[240]"></a>LSM6DSL_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[241]"></a>LSM6DSL_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[242]"></a>LSM6DSL_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[243]"></a>LSM6DSL_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Wake_Up_Threshold
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[244]"></a>LSM6DSL_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[213]"></a>LSM6DSL_ACC_GYRO_WriteReg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LowPassFiltSel_XL
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LP_BW_G
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_InComposit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_HPCF_XL
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_I2C_DISABLE
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
</UL>

<P><STRONG><a name="[122]"></a>LSM6DSL_Sensor_IO_ITConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, steval_fcu001_v1.o(i.LSM6DSL_Sensor_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
</UL>

<P><STRONG><a name="[e5]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2b2]"></a>PIDControlInit</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, flight_control.o(i.PIDControlInit))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>QuaternionToEuler</STRONG> (Thumb, 322 bytes, Stack size 88 bytes, quaternion.o(i.QuaternionToEuler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = QuaternionToEuler &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>ReadSensorRawData</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, sensor_data.o(i.ReadSensorRawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadSensorRawData &rArr; BSP_PRESSURE_Get_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Get_Press
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Get_Axes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d5]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[26a]"></a>SPI_Read</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, steval_fcu001_v1.o(i.SPI_Read))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Read
</UL>

<P><STRONG><a name="[269]"></a>SPI_Read_nBytes</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, steval_fcu001_v1.o(i.SPI_Read_nBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Read_nBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Read
</UL>

<P><STRONG><a name="[268]"></a>SPI_Write</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, steval_fcu001_v1.o(i.SPI_Write))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Write
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Read
</UL>

<P><STRONG><a name="[120]"></a>Sensor_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, steval_fcu001_v1.o(i.Sensor_IO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
</UL>

<P><STRONG><a name="[1ae]"></a>Sensor_IO_Read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, steval_fcu001_v1.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>

<P><STRONG><a name="[264]"></a>Sensor_IO_SPI_CS_Disable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_CS_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_IO_SPI_CS_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Write
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Read
</UL>

<P><STRONG><a name="[265]"></a>Sensor_IO_SPI_CS_Enable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_CS_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Write
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Read
</UL>

<P><STRONG><a name="[11b]"></a>Sensor_IO_SPI_CS_Init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_CS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sensor_IO_SPI_CS_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[266]"></a>Sensor_IO_SPI_CS_Init_All</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_CS_Init_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sensor_IO_SPI_CS_Init_All &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>Sensor_IO_SPI_Init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[263]"></a>Sensor_IO_SPI_Read</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Enable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Disable
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_nBytes
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[26b]"></a>Sensor_IO_SPI_Write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, steval_fcu001_v1.o(i.Sensor_IO_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Enable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Disable
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[11c]"></a>Sensor_IO_Write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, steval_fcu001_v1.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_WriteReg
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
</UL>

<P><STRONG><a name="[2b3]"></a>SetupTimer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.SetupTimer))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26c]"></a>StartTimer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; User_Timer_Callback &rArr; TimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>SystemClock_Config</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ReadSensorRawData &rArr; BSP_PRESSURE_Get_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ReadSensorRawData &rArr; BSP_PRESSURE_Get_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[185]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[18f]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[17e]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[270]"></a>TimerProcess</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.TimerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Timer_Callback
</UL>

<P><STRONG><a name="[d7]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[28b]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[276]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[278]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[275]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[27b]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[27c]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[274]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[280]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[134]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[136]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[132]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[138]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[28d]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[157]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[158]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[282]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[277]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[15a]"></a>USBD_LL_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[15b]"></a>USBD_LL_Resume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[15c]"></a>USBD_LL_SOF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[159]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[283]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[15f]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[27a]"></a>USBD_LL_StallEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[160]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[279]"></a>USBD_LL_Transmit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[284]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[281]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[28a]"></a>USBD_SetClassConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[285]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[287]"></a>USBD_StdEPReq</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[286]"></a>USBD_StdItfReq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[13c]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[150]"></a>USB_ActivateSetup</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>USB_EP0StartXfer</STRONG> (Thumb, 426 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[142]"></a>USB_EP0_OutStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[13a]"></a>USB_EPClearStall</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[141]"></a>USB_EPSetStall</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[13f]"></a>USB_EPStartXfer</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[14f]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>USB_GetDevSpeed</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>USB_ReadInterrupts</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>USB_ReadPacket</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>USB_SetDevAddress</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[25c]"></a>USB_WritePacket</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>

<P><STRONG><a name="[16e]"></a>User_Timer_Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.User_Timer_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = User_Timer_Callback &rArr; TimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[28e]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2cf]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2d0]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2d1]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2b8]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>

<P><STRONG><a name="[293]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[25f]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToEuler
</UL>

<P><STRONG><a name="[298]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[25e]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToEuler
</UL>

<P><STRONG><a name="[295]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[290]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[299]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[292]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[294]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[2d2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2d3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[291]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[17c]"></a>add_queue</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, rc.o(i.add_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[2a0]"></a>ahrs_fusion_ag</STRONG> (Thumb, 1388 bytes, Stack size 152 bytes, ahrs.o(i.ahrs_fusion_ag))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ahrs_fusion_ag &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29a]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2a2]"></a>enableAllSensors</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.enableAllSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = enableAllSensors &rArr; myprintf &rArr; usart_puts &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Sensor_Enable
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Sensor_Enable
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Sensor_Enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[296]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[2a9]"></a>init_queue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rc.o(i.init_queue))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_remote_control
</UL>

<P><STRONG><a name="[16f]"></a>init_rc_variables</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rc.o(i.init_rc_variables))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_remote_control
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[2a8]"></a>init_remote_control</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, rc.o(i.init_remote_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_remote_control
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc_variables
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a1]"></a>invSqrt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, basic_math.o(i.invSqrt))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_fusion_ag
</UL>

<P><STRONG><a name="[2b6]"></a>isTimerEventExist</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.isTimerEventExist))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>main</STRONG> (Thumb, 2152 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; enableAllSensors &rArr; myprintf &rArr; usart_puts &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTimerEventExist
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupTimer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTimer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlightControlPID_OuterLoop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pwm_zero
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init_All
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaternionToEuler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LowPassFiltSel_XL
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LP_BW_G
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_InComposit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_HPCF_XL
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Write_Reg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Write_Reg
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Write_Reg
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_ODR_Value
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_FS
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Read_Reg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAllSensors
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahrs_fusion_ag
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_remote_control
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTargetEulerAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2a4]"></a>myprintf</STRONG> (Thumb, 42 bytes, Stack size 288 bytes, debug.o(i.myprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = myprintf &rArr; usart_puts &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_puts
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAllSensors
</UL>

<P><STRONG><a name="[199]"></a>set_motor_pwm</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, motor.o(i.set_motor_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_motor_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[198]"></a>set_motor_pwm_zero</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, motor.o(i.set_motor_pwm_zero))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[297]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[17b]"></a>update_rc_data</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, rc.o(i.update_rc_data))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[2b9]"></a>usart_puts</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug.o(i.usart_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart_puts &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[127]"></a>ADC_Init</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[14c]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[177]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[18e]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[190]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[191]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[176]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[178]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[17f]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[180]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[181]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[12f]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[130]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f1]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[f2]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[19c]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19e]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[254]"></a>MX_ADC1_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256]"></a>MX_GPIO_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[257]"></a>MX_TIM2_Init</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[259]"></a>MX_TIM4_Init</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25a]"></a>MX_TIM9_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_TIM9_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2aa]"></a>initializeAllSensors</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.initializeAllSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = initializeAllSensors &rArr; BSP_PRESSURE_Init &rArr; BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>BSP_LSM303AGR_ACCELERO_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, steval_fcu001_v1_accelero.o(i.BSP_LSM303AGR_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LSM303AGR_ACCELERO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[10d]"></a>BSP_LSM6DSL_ACCELERO_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, steval_fcu001_v1_accelero.o(i.BSP_LSM6DSL_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LSM6DSL_ACCELERO_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_I2C_DISABLE
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[110]"></a>BSP_LSM6DSL_GYRO_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, steval_fcu001_v1_gyro.o(i.BSP_LSM6DSL_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LSM6DSL_GYRO_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_I2C_DISABLE
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
</UL>

<P><STRONG><a name="[118]"></a>BSP_LIS2MDL_MAGNETO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, steval_fcu001_v1_magneto.o(i.BSP_LIS2MDL_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LIS2MDL_MAGNETO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init
</UL>

<P><STRONG><a name="[119]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, steval_fcu001_v1_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_SPI_CS_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_SwResetAndMemoryBoot
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_I2C
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[273]"></a>USBD_ClrFeature</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[27d]"></a>USBD_GetConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[27e]"></a>USBD_GetDescriptor</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[27f]"></a>USBD_GetStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[288]"></a>USBD_SetAddress</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[289]"></a>USBD_SetConfig</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[28c]"></a>USBD_SetFeature</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[245]"></a>LSM6DSL_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Check_WhoAmI
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[36]"></a>LSM6DSL_FIFO_G_Get_Axis</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_FIFO_G_Get_Axis &rArr; LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LSM6DSL_FIFO_G_Set_Decimation</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_G_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LSM6DSL_FIFO_Get_Data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LSM6DSL_FIFO_Get_Empty_Status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_Get_Empty_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LSM6DSL_FIFO_Get_Full_Status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_Get_Full_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LSM6DSL_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_FIFO_Get_Num_Of_Samples &rArr; LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LSM6DSL_FIFO_Get_Overrun_Status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_Get_Overrun_Status &rArr; LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LSM6DSL_FIFO_Get_Pattern</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_FIFO_Get_Pattern &rArr; LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LSM6DSL_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LSM6DSL_FIFO_Set_Mode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_Set_Mode &rArr; LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LSM6DSL_FIFO_Set_ODR_Value</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_FIFO_Set_ODR_Value &rArr; LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LSM6DSL_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_Set_Stop_On_Fth &rArr; LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LSM6DSL_FIFO_Set_Watermark_Level</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_FIFO_Set_Watermark_Level &rArr; LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LSM6DSL_FIFO_X_Get_Axis</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_FIFO_X_Get_Axis &rArr; LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>LSM6DSL_FIFO_X_Set_Decimation</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_FIFO_X_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LSM6DSL_G_Check_WhoAmI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_G_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LSM6DSL_G_DeInit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_G_DeInit &rArr; LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LSM6DSL_G_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_G_Get_Axes &rArr; LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LSM6DSL_G_Get_AxesRaw</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_G_Get_AxesRaw &rArr; LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[247]"></a>LSM6DSL_G_Get_Axes_Raw</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_G_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_AxesRaw
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
</UL>

<P><STRONG><a name="[5c]"></a>LSM6DSL_G_Get_DRDY_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_G_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LSM6DSL_G_Get_FS</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_G_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LSM6DSL_G_Get_ODR</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LSM6DSL_G_Get_Sensitivity</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_G_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>LSM6DSL_G_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_G_Get_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LSM6DSL_G_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_G_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LSM6DSL_G_Read_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_G_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LSM6DSL_G_Sensor_Disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LSM6DSL_G_Sensor_Enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_G_Sensor_Enable &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LSM6DSL_G_Set_FS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_G_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LSM6DSL_G_Set_FS_Value</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_G_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LSM6DSL_G_Set_Interrupt_Latch</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_G_Set_Interrupt_Latch &rArr; LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>LSM6DSL_G_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_G_Set_ODR &rArr; LSM6DSL_G_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_When_Enabled
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>LSM6DSL_G_Set_ODR_Value</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_G_Set_ODR_Value &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24d]"></a>LSM6DSL_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[249]"></a>LSM6DSL_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Enable
</UL>

<P><STRONG><a name="[24c]"></a>LSM6DSL_G_Set_ODR_When_Disabled</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSM6DSL_G_Set_ODR_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR
</UL>

<P><STRONG><a name="[24b]"></a>LSM6DSL_G_Set_ODR_When_Enabled</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_G_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR
</UL>

<P><STRONG><a name="[38]"></a>LSM6DSL_G_Set_SelfTest</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_G_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>LSM6DSL_G_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_G_Write_Reg &rArr; LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[246]"></a>LSM6DSL_Get_WhoAmI</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_WhoAmI
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_WhoAmI
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>

<P><STRONG><a name="[248]"></a>LSM6DSL_Read_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Read_Reg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Read_Reg
</UL>

<P><STRONG><a name="[24a]"></a>LSM6DSL_Set_Interrupt_Latch</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Interrupt_Latch
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[24e]"></a>LSM6DSL_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Write_Reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Write_Reg
</UL>

<P><STRONG><a name="[3e]"></a>LSM6DSL_X_Check_WhoAmI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_X_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LSM6DSL_X_DeInit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_X_DeInit &rArr; LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LSM6DSL_X_Disable_6D_Orientation</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_X_Disable_6D_Orientation &rArr; LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>LSM6DSL_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_X_Disable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>LSM6DSL_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Disable_Free_Fall_Detection &rArr; LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LSM6DSL_X_Disable_Pedometer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LSM6DSL_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_X_Disable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>LSM6DSL_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_X_Disable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LSM6DSL_X_Disable_Tilt_Detection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_X_Disable_Tilt_Detection &rArr; LSM6DSL_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LSM6DSL_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_X_Disable_Wake_Up_Detection &rArr; LSM6DSL_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LSM6DSL_X_Enable_6D_Orientation</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_6D_Orientation &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LSM6DSL_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>LSM6DSL_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_Free_Fall_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>LSM6DSL_X_Enable_Pedometer</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_Pedometer &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LSM6DSL_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>LSM6DSL_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_X_Enable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>LSM6DSL_X_Enable_Tilt_Detection</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_Tilt_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LSM6DSL_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DSL_X_Enable_Wake_Up_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LSM6DSL_X_Get_6D_Orientation_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_Status &rArr; LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LSM6DSL_X_Get_6D_Orientation_XH</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XH &rArr; LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>LSM6DSL_X_Get_6D_Orientation_XL</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XL &rArr; LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LSM6DSL_X_Get_6D_Orientation_YH</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YH &rArr; LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LSM6DSL_X_Get_6D_Orientation_YL</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YL &rArr; LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LSM6DSL_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZH &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LSM6DSL_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZL &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LSM6DSL_X_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_X_Get_Axes &rArr; LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LSM6DSL_X_Get_AxesRaw</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DSL_X_Get_AxesRaw &rArr; LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24f]"></a>LSM6DSL_X_Get_Axes_Raw</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_X_Get_Axes_Raw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_AxesRaw
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
</UL>

<P><STRONG><a name="[4a]"></a>LSM6DSL_X_Get_DRDY_Status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>LSM6DSL_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Double_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LSM6DSL_X_Get_FS</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>LSM6DSL_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Free_Fall_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LSM6DSL_X_Get_ODR</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LSM6DSL_X_Get_Pedometer_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Pedometer_Status &rArr; LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LSM6DSL_X_Get_Sensitivity</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>LSM6DSL_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Single_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>LSM6DSL_X_Get_Step_Count</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_X_Get_Step_Count &rArr; LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>LSM6DSL_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Tilt_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LSM6DSL_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Get_Wake_Up_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LSM6DSL_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_X_Get_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LSM6DSL_X_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DSL_X_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LSM6DSL_X_Read_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Read_Reg &rArr; LSM6DSL_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>LSM6DSL_X_Sensor_Disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_X_Sensor_Disable &rArr; LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LSM6DSL_X_Sensor_Enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_X_Sensor_Enable &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LSM6DSL_X_Set_FS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LSM6DSL_X_Set_FS_Value</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_X_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>LSM6DSL_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_Free_Fall_Threshold &rArr; LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LSM6DSL_X_Set_Interrupt_Latch</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_X_Set_Interrupt_Latch &rArr; LSM6DSL_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LSM6DSL_X_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_X_Set_ODR &rArr; LSM6DSL_X_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_When_Enabled
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LSM6DSL_X_Set_ODR_Value</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[253]"></a>LSM6DSL_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[250]"></a>LSM6DSL_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Enable
</UL>

<P><STRONG><a name="[252]"></a>LSM6DSL_X_Set_ODR_When_Disabled</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSM6DSL_X_Set_ODR_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR
</UL>

<P><STRONG><a name="[251]"></a>LSM6DSL_X_Set_ODR_When_Enabled</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_ODR_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR
</UL>

<P><STRONG><a name="[b]"></a>LSM6DSL_X_Set_Pedometer_Threshold</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LSM6DSL_X_Set_SelfTest</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LSM6DSL_X_Set_Tap_Duration_Time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_Tap_Duration_Time &rArr; LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LSM6DSL_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_Tap_Quiet_Time &rArr; LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>LSM6DSL_X_Set_Tap_Shock_Time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_Tap_Shock_Time &rArr; LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>LSM6DSL_X_Set_Tap_Threshold</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>LSM6DSL_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM6DSL_X_Set_Wake_Up_Threshold &rArr; LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>LSM6DSL_X_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM6DSL_X_Write_Reg &rArr; LSM6DSL_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>LIS2MDL_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LIS2MDL_Check_WhoAmI &rArr; LIS2MDL_Get_WhoAmI &rArr; LIS2MDL_MAG_R_WhoAmI_Bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>LIS2MDL_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LIS2MDL_DeInit &rArr; LIS2MDL_Check_WhoAmI &rArr; LIS2MDL_Get_WhoAmI &rArr; LIS2MDL_MAG_R_WhoAmI_Bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Sensor_Disable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>LIS2MDL_Get_Axes</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS2MDL_Get_Axes &rArr; LIS2MDL_Get_Axes_Raw &rArr; LIS2MDL_MAG_Get_MagneticOutputs &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_Sensitivity
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>LIS2MDL_Get_AxesRaw</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS2MDL_Get_AxesRaw &rArr; LIS2MDL_Get_Axes_Raw &rArr; LIS2MDL_MAG_Get_MagneticOutputs &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a5]"></a>LIS2MDL_Get_Axes_Raw</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LIS2MDL_Get_Axes_Raw &rArr; LIS2MDL_MAG_Get_MagneticOutputs &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_Get_MagneticOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_AxesRaw
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_Axes
</UL>

<P><STRONG><a name="[6e]"></a>LIS2MDL_Get_DRDY_Status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LIS2MDL_Get_DRDY_Status &rArr; LIS2MDL_MAG_R_STATUS_bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_R_STATUS_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>LIS2MDL_Get_FS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_FS))
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LIS2MDL_Get_ODR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LIS2MDL_Get_ODR &rArr; LIS2MDL_MAG_R_DataRate &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_R_DataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>LIS2MDL_Get_Sensitivity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_Sensitivity))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>LIS2MDL_Get_WhoAmI</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LIS2MDL_Get_WhoAmI &rArr; LIS2MDL_MAG_R_WhoAmI_Bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_R_WhoAmI_Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LIS2MDL_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LIS2MDL_Init &rArr; LIS2MDL_Check_WhoAmI &rArr; LIS2MDL_Get_WhoAmI &rArr; LIS2MDL_MAG_R_WhoAmI_Bits &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_SelfTest
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_Operating_Mode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_BlockDataUpdate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Set_ODR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Set_FS
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>LIS2MDL_Read_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LIS2MDL_Read_Reg &rArr; LIS2MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>LIS2MDL_Sensor_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LIS2MDL_Sensor_Disable &rArr; LIS2MDL_MAG_W_Operating_Mode &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_Operating_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>LIS2MDL_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LIS2MDL_Sensor_Enable &rArr; LIS2MDL_MAG_W_Operating_Mode &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_Operating_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>LIS2MDL_Set_FS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_FS))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>LIS2MDL_Set_FS_Value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_FS_Value))
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>LIS2MDL_Set_ODR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LIS2MDL_Set_ODR &rArr; LIS2MDL_MAG_W_DataRate &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_DataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>LIS2MDL_Set_ODR_Value</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LIS2MDL_Set_ODR_Value &rArr; LIS2MDL_MAG_W_DataRate &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_W_DataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>LIS2MDL_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lis2mdl_mag_driver_hl.o(i.LIS2MDL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LIS2MDL_Write_Reg &rArr; LIS2MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS2MDL_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis2mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b1]"></a>LPS22HB_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[90]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
</UL>

<P><STRONG><a name="[1b3]"></a>LPS22HB_Get_Press</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[1b4]"></a>LPS22HB_Get_Temp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[1b2]"></a>LPS22HB_Get_WhoAmI</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[1c8]"></a>LPS22HB_Initialize</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_SpiInterface
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[74]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>LPS22HB_P_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>LPS22HB_Read_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
</UL>

<P><STRONG><a name="[1d4]"></a>LPS22HB_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[1d1]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[1d3]"></a>LPS22HB_Set_ODR_When_Disabled</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[1d2]"></a>LPS22HB_Set_ODR_When_Enabled</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[81]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>LPS22HB_T_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d5]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
</UL>

<P><STRONG><a name="[9d]"></a>LSM303AGR_X_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM303AGR_X_Check_WhoAmI &rArr; LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>LSM303AGR_X_DeInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM303AGR_X_DeInit &rArr; LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>LSM303AGR_X_Get_Axes</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_X_Get_Axes &rArr; LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>LSM303AGR_X_Get_AxesRaw</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_X_Get_AxesRaw &rArr; LSM303AGR_X_Get_Axes_Raw &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1eb]"></a>LSM303AGR_X_Get_Axes_Raw</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM303AGR_X_Get_Axes_Raw &rArr; LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesRaw
</UL>

<P><STRONG><a name="[a7]"></a>LSM303AGR_X_Get_Axes_Status</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM303AGR_X_Get_Axes_Status &rArr; LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>LSM303AGR_X_Get_DRDY_Status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_DRDY_Status &rArr; LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LSM303AGR_X_Get_FS</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_FS &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>LSM303AGR_X_Get_ODR</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>LSM303AGR_X_Get_Sensitivity</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM303AGR_X_Get_Sensitivity &rArr; LSM303AGR_X_Get_Sensitivity_Normal_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_Normal_Mode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_LP_Mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity_HR_Mode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1ee]"></a>LSM303AGR_X_Get_Sensitivity_HR_Mode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity_HR_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_Sensitivity_HR_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
</UL>

<P><STRONG><a name="[1ed]"></a>LSM303AGR_X_Get_Sensitivity_LP_Mode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity_LP_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_Sensitivity_LP_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
</UL>

<P><STRONG><a name="[1ec]"></a>LSM303AGR_X_Get_Sensitivity_Normal_Mode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity_Normal_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_Sensitivity_Normal_Mode &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
</UL>

<P><STRONG><a name="[9c]"></a>LSM303AGR_X_Get_WhoAmI</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>LSM303AGR_X_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM303AGR_X_Init &rArr; LSM303AGR_X_Check_WhoAmI &rArr; LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>LSM303AGR_X_Read_Reg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM303AGR_X_Read_Reg &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>LSM303AGR_X_Sensor_Disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; Sensor_IO_SPI_Read &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>LSM303AGR_X_Sensor_Enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM303AGR_X_Sensor_Enable &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>LSM303AGR_X_Set_Axes_Status</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Set_Axes_Status &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>LSM303AGR_X_Set_FS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Set_FS &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LSM303AGR_X_Set_FS_Value</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM303AGR_X_Set_FS_Value &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>LSM303AGR_X_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LSM303AGR_X_Set_ODR &rArr; LSM303AGR_X_Set_ODR_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_When_Enabled
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>LSM303AGR_X_Set_ODR_Value</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM303AGR_X_Set_ODR_Value &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f2]"></a>LSM303AGR_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[1ef]"></a>LSM303AGR_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Enable
</UL>

<P><STRONG><a name="[1f1]"></a>LSM303AGR_X_Set_ODR_When_Disabled</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSM303AGR_X_Set_ODR_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR
</UL>

<P><STRONG><a name="[1f0]"></a>LSM303AGR_X_Set_ODR_When_Enabled</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LSM303AGR_X_Set_ODR_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR
</UL>

<P><STRONG><a name="[aa]"></a>LSM303AGR_X_Write_Reg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM303AGR_X_Write_Reg &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; Sensor_IO_SPI_Write &rArr; Sensor_IO_SPI_CS_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[29e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f3]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
